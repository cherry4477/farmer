{{ range $service := lsdir "/services" }}
    {{ if ls (printf "/services/%s/http" $service) }}
        upstream backend_{{ base $service }} {
            least_conn;{{range getvs (printf "/services/%s/http/*" $service)}}
            server {{.}};{{end}}
        }

        server {
            listen 80;

            {{ range getvs (printf "/services/%s/domains/*" $service) }}
            server_name {{.}};{{end}}

            client_max_body_size 100M;

            location / {
                proxy_pass       http://backend_{{base $service}};
                proxy_redirect   off;
                proxy_set_header Host            $host;
                proxy_set_header X-Real-IP       $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Service-Name  {{ base $service }};
            }
        }

        {{ if exists (printf "/certs/%s/ssl.crt" $service) }}
        server {
            listen 443;

            {{ range getvs (printf "/services/%s/domains/*" $service) }}
            server_name {{.}};{{end}}

            ssl on;
            ssl_certificate      /certs/{{ base $service }}/ssl.crt;
            ssl_certificate_key  /certs/{{ base $service }}/ssl.key;
            ssl_protocols        SSLv3 TLSv1 TLSv1.1 TLSv1.2;
            ssl_session_timeout  10m;
            ssl_session_cache    shared:SSL:10m;
            ssl_ciphers          HIGH:!aNULL:!MD5;

            client_max_body_size 100M;

            location / {
                proxy_pass       http://backend_{{ base $service }};
                proxy_redirect   off;
                proxy_set_header Host              $host;
                proxy_set_header X-Real-IP         $remote_addr;
                proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
                proxy_set_header X-Scheme          $scheme;
                proxy_set_header X-Service-Name    {{ base $service }};
                proxy_set_header X-Client-Verify   SUCCESS;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-Client-DN       $ssl_client_s_dn;
                proxy_set_header X-SSL-Subject     $ssl_client_s_dn;
                proxy_set_header X-SSL-Issuer      $ssl_client_i_dn;
            }
        }
        {{ end }}

    {{ end }}
{{ end }}

server {
    listen 80 default_server;
    server_name  _;

    error_page 404 /404.html;

    location = /404.html {
        root /usr/share/nginx/html;
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods GET always;
        internal;
    }
}
